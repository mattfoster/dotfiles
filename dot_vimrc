call plug#begin()

Plug 'tpope/vim-sensible'               " Sensible defaults
Plug 'tpope/vim-surround'               " Surround things with other things
Plug 'tpope/vim-commentary'             " Comment stuff out
Plug 'ctrlpvim/ctrlp.vim'               " Fuzzy file finder
Plug 'bling/vim-airline'                " Pretty status bar
Plug 'takac/vim-hardtime'               " Disable/toggle arrow keys
Plug 'kshenoy/vim-signature'            " Navigate marks
Plug 'junegunn/vim-easy-align'          " Aligment of =>, comments etc
Plug 'w0rp/ale'                         " Linting
Plug 'csexton/trailertrash.vim'         " Highlight trailing whitespace
Plug 'tpope/vim-fugitive'                " Git support

" Colourscheme
Plug 'jpo/vim-railscasts-theme'
Plug 'altercation/vim-colors-solarized'

" Language support
Plug 'vim-perl/vim-perl'
Plug 'fatih/vim-go'
Plug 'rodjek/vim-puppet'

" Distraction free writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'tpope/vim-markdown'

if has('nvim')
Plug 'ms-jpq/chadtree'                  " File manager
endif

call plug#end()

set hidden
set relativenumber
set ignorecase
set smartcase
set expandtab
set hlsearch " Highlight search results

" Theme options
set background=dark
let g:solarized_termcolors=256
syntax enable
colorscheme solarized
set t_Co=256

" Key mappings:
map #2 :s/\([A-Z]\)\([A-Z][A-Z]*\)/\1\L\2/g<CR>
map #3 :Tlist<CR>
map #4 :ShowMarksToggle<CR>

" Number truncation:
map <silent> ,,t  :. rubydo $_.gsub!(/(\d+\.\d+)/) { sprintf("%.*f", 2, $1.to_f) } <CR>
map <silent> ,,td :rubydo $_.gsub!(/(\d+\.\d+)/) { sprintf("%.*f", 2, $1.to_f) } <CR>

" Bracketed paste mode
" From: http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x
if &term =~ "xterm.*"
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te
    function XTermPasteBegin(ret)
        set pastetoggle=<Esc>[201~
        set paste
        return a:ret
    endfunction
    map <expr> <Esc>[200~ XTermPasteBegin("i")
    imap <expr> <Esc>[200~ XTermPasteBegin("")
endif

if has("autocmd")
  filetype plugin indent on
  " Filetype overrides.
  "see header files as 'c' header, instead of cpp.
  au BufRead,BufNewFile *.h  setfiletype c
  autocmd Filetype c      setlocal shiftwidth=4 shiftround
  "and make sure html files shiftwdith is 2.
  autocmd FileType *html  setlocal shiftwidth=2
  autocmd FileType *tt    setlocal shiftwidth=2
  autocmd FileType *js    setlocal shiftwidth=2
  autocmd FileType *xml   setlocal shiftwidth=2
  autocmd FileType matlab setlocal shiftwidth=2
  autocmd FileType ruby   setlocal shiftwidth=2
  autocmd FileType perl   setlocal shiftwidth=4 tabstop=4 softtabstop=4
  au! BufRead,BufNewFile *.tt    setfiletype tt2html
  au! BufRead,BufNewFile *.otl    setfiletype vo_base
  au! BufRead,BufNewFile *.oln    setfiletype xoutliner
  au! BufRead,BufNewFile *.gp     setfiletype gnuplot
  autocmd BufRead,BufNewFile *.py set ai
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event
  " handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
endif " has("autocmd")

if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
    \ if &omnifunc == "" |
    \   setlocal omnifunc=syntaxcomplete#Complete |
    \ endif
endif

cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=999

set cursorline

let mapleader=","
nnoremap <leader><leader> <c-^>
set scrolloff=3

" Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" GRB: clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" GRB: use emacs-style tab completion when selecting files, etc
set wildmode=longest,list

" GRB: Put useful info in status line
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>gt :CommandTFlush<cr>\|:CommandT tests<cr>

" let g:Powerline_symbols='fancy'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" delete CVE overrides
let @d='^f(df-f|dt'''
" Empty vuln template
let @t="i    {        tag => '',sev => 'P',desc => '',versions => [''],page     => '',cve => '',},"
" Add PCI override
let @s=':s/\(.\),$/|mpf|XXX\1,/:s/XXX/\=strftime("%Y-%m-%d")/'
" quote regex metas
let @r=':s#\([/.()]\)#[\1]#g'

" Disable/Enable Hardtime
let g:hardtime_default_on = 0
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 6
let g:hardtime_showmsg = 1
let g:list_of_normal_keys = ["h", "j", "k", "l", "-", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_disabled_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
:nnoremap <leader>h <Esc>:HardTimeToggle<CR>

" Clean whitespace
" autocmd BufWritePre * :%s/\s\+$//e

let g:go_version_warning = 0

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
  \ --ignore .git
  \ --ignore .svn
  \ --ignore .hg
  \ --ignore .DS_Store
  \ --ignore "**/*.pyc"
  \ -g ""'

let g:ale_linters                 = { 'perl': ['perl', 'perlcritic'] }
let g:ale_perl_perl_options       = '-cW -Ilib -I./'
let g:ale_perl_perlcritic_options = '--stern'


autocmd FileType gitcommit setlocal spell
autocmd FileType perl setlocal foldmethod=syntax
autocmd FileType perl setlocal foldenable
autocmd FileType perl syn region POD start=/^=item/ end=/^=cut/ fold
